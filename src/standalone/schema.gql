type Query {
    mockedEndpoints: [MockedEndpoint!]!
    mockedEndpoint(id: ID!): MockedEndpoint
}

type MockedEndpoint {
    id: ID!
    seenRequests: [Request!]!
}

type Request {
    protocol: String!
    method: String!
    url: String!
    path: String!
    hostname: String!

    headers: Json!
    body: RequestBody!
}

type RequestBody {
    buffer: Any!
    text: String
    json: Json
    formData: Json
}

type Mutation {
    addRule(input: MockRule!): MockedEndpoint!
    reset: Boolean!
}

input MockRule {
    matchers: [RequestMatcher!]!
    handler: RequestHandler!
    completionChecker: RuleCompletionChecker
}

type Subscription {
    requestReceived: Request!
}

scalar Any
scalar Json
scalar RequestMatcher
scalar RequestHandler
scalar RuleCompletionChecker