type Query {
    mockedEndpoints: [MockedEndpoint!]!
    mockedEndpoint(id: ID!): MockedEndpoint
}

type Mutation {
    addRule(input: MockRule!): MockedEndpoint!
    addRules(input: [MockRule!]!): [MockedEndpoint!]!
    setRules(input: [MockRule!]!): [MockedEndpoint!]!
    reset: Boolean!
}

type Subscription {
    requestInitiated: InitiatedRequest!
    requestReceived: Request!
    responseCompleted: Response!
    requestAborted: Request!
    failedTlsRequest: TlsRequest!
    failedClientRequest: ClientError!
}

type MockedEndpoint {
    id: ID!
    seenRequests: [Request!]!
}

input MockRule {
    id: String
    matchers: [RequestMatcher!]!
    handler: RequestHandler!
    completionChecker: RuleCompletionChecker
}

type TlsRequest {
    failureCause: String!
    hostname: String
    remoteIpAddress: String!
    tags: [String!]!
}

type ClientError {
    errorCode: String
    request: ClientErrorRequest!
    response: Response
}

type ClientErrorRequest {
    id: ID!
    timingEvents: Json!
    tags: [String!]!

    protocol: String
    httpVersion: String
    method: String
    url: String
    path: String
    headers: Json
}

type InitiatedRequest {
    id: ID!
    timingEvents: Json!
    tags: [String!]!
    matchedRuleId: ID

    protocol: String!
    httpVersion: String!
    method: String!
    url: String!
    path: String!
    hostname: String

    headers: Json!
}

type Request {
    id: ID!
    timingEvents: Json!
    tags: [String!]!
    matchedRuleId: ID

    protocol: String!
    httpVersion: String!
    method: String!
    url: String!
    path: String!
    hostname: String

    headers: Json!
    body: Buffer!
}

type Response {
    id: ID!
    timingEvents: Json!
    tags: [String!]!

    statusCode: Int!
    statusMessage: String!

    headers: Json!
    body: Buffer!
}

scalar Any
scalar Json
scalar Buffer
scalar RequestMatcher
scalar RequestHandler
scalar RuleCompletionChecker